version: "3.9"

services:
  app:
    build:
      context: .
      args:
        - DEV=true
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
      - dev-static-data:/vol/web
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db
      - DB_NAME=app
      - DB_USER=postgres
      - DB_PASS=supersecretpassword
    depends_on:
      - db

  db:
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=supersecretpassword
volumes:
  dev-db-data:
  dev-static-data:

# In summary, named volumes are a type of Docker volume managed by Docker, "mount" is a general term for attaching filesystems, and bind mounts are a specific type of mount where a host directory is directly mapped into a container
# If the path before the colon is an absolute or relative path on your local machine, it is treated as a bind mount. This means that the specified directory on your local machine is directly mounted into the container. but if the path before the colon is not a valid local path or is a named volume (e.g., volume_name:/container/path), Docker treats it as a named volume. Named volumes are managed by Docker, and their data is stored outside the container filesystem.
# ownership and permissions do not exchange between the container and the local machine during a bind mount. The local machine reflects its own ownership and permissions, and the container reflects the ownership and permissions set by the processes running inside the container.
